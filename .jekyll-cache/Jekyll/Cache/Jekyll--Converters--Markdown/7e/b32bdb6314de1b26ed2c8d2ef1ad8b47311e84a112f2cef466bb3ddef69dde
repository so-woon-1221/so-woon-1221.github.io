I"M-<h2 id="1-화면구성">1. 화면구성</h2>

<p><img src="/assets/image/shoppingmall-mainpage.png" alt="UI" /></p>

<p>그리드뷰를 활용해서 3개씩 격자형태로 표시되게 했다.<br />
각 항목들은 대표 이미지, 상품명, 가격, 태그를 갖고있다.<br />
해당 아이템을 클릭할 시 제품 상세 페이지로 이동한다.</p>

<h2 id="2-상세-설명">2. 상세 설명</h2>

<ul>
  <li>modules/list.js</li>
</ul>

<div class="language-react highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">createAction</span><span class="p">,</span> <span class="nx">handleActions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-actions</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">createRequestSaga</span><span class="p">,</span> <span class="p">{</span>
  <span class="nx">createRequestActionTypes</span><span class="p">,</span>
<span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../lib/createRequestSaga</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">itemAPI</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../lib/api/items</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">takeLatest</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">redux-saga/effects</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="p">[</span>
  <span class="nx">LIST_ITEMS</span><span class="p">,</span>
  <span class="nx">LIST_ITEMS_SUCCESS</span><span class="p">,</span>
  <span class="nx">LIST_ITEMS_FAILURE</span><span class="p">,</span>
<span class="p">]</span> <span class="o">=</span> <span class="nx">createRequestActionTypes</span><span class="p">(</span><span class="dl">'</span><span class="s1">list/LIST_ITEMS</span><span class="dl">'</span><span class="p">);</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">listItems</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">LIST_ITEMS</span><span class="p">);</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">unloadItems</span> <span class="o">=</span> <span class="nx">createAction</span><span class="p">(</span><span class="nx">UNLOAD_LIST</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">listItemsSaga</span> <span class="o">=</span> <span class="nx">createRequestSaga</span><span class="p">(</span><span class="nx">LIST_ITEMS</span><span class="p">,</span> <span class="nx">itemAPI</span><span class="p">.</span><span class="nx">listItem</span><span class="p">);</span>
<span class="k">export</span> <span class="kd">function</span><span class="o">*</span> <span class="nx">listSaga</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">yield</span> <span class="nx">takeLatest</span><span class="p">(</span><span class="nx">LIST_ITEMS</span><span class="p">,</span> <span class="nx">listItemsSaga</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">items</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
  <span class="na">error</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">list</span> <span class="o">=</span> <span class="nx">handleActions</span><span class="p">(</span>
  <span class="p">{</span>
    <span class="p">[</span><span class="nx">LIST_ITEMS_SUCCESS</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="na">payload</span><span class="p">:</span> <span class="nx">items</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="p">...</span><span class="nx">state</span><span class="p">,</span>
      <span class="nx">items</span><span class="p">,</span>
    <span class="p">}),</span>
    <span class="p">[</span><span class="nx">LIST_ITEMS_FAILURE</span><span class="p">]:</span> <span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="p">{</span> <span class="na">payload</span><span class="p">:</span> <span class="nx">error</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="p">...</span><span class="nx">state</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}),</span>
    <span class="p">[</span><span class="nx">UNLOAD_LIST</span><span class="p">]:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">initialState</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nx">initialState</span><span class="p">,</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">list</span><span class="p">;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">LIST_ITEMS</code>라는 액션이 수행되면 DB에 있는 모든 상품 데이터를 읽어온다.</p>

<ul>
  <li>container/view/ItemListViewerContainer.js</li>
</ul>

<div class="language-react highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">withRouter</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-router-dom</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">useDispatch</span><span class="p">,</span> <span class="nx">useSelector</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-redux</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">ItemListViewer</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../components/viewer/ItemListViewer</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">listItems</span><span class="p">,</span> <span class="nx">unloadItems</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../../modules/list</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">ItemListViewerContainer</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">dispatch</span> <span class="o">=</span> <span class="nx">useDispatch</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">loading</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useSelector</span><span class="p">(({</span> <span class="nx">list</span><span class="p">,</span> <span class="nx">loading</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">items</span><span class="p">:</span> <span class="nx">list</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span>
    <span class="na">error</span><span class="p">:</span> <span class="nx">list</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span>
    <span class="na">loading</span><span class="p">:</span> <span class="nx">loading</span><span class="p">[</span><span class="dl">'</span><span class="s1">list/LIST_ITEMS</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">}));</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">dispatch</span><span class="p">(</span><span class="nx">listItems</span><span class="p">());</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">dispatch</span><span class="p">(</span><span class="nx">unloadItems</span><span class="p">());</span>
    <span class="p">};</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">dispatch</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">ItemListViewer</span> <span class="na">loading</span><span class="p">=</span><span class="si">{</span><span class="nx">loading</span><span class="si">}</span> <span class="na">items</span><span class="p">=</span><span class="si">{</span><span class="nx">items</span><span class="si">}</span> <span class="na">error</span><span class="p">=</span><span class="si">{</span><span class="nx">error</span><span class="si">}</span> <span class="p">/&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">withRouter</span><span class="p">(</span><span class="nx">ItemListViewerContainer</span><span class="p">);</span>
</code></pre></div></div>

<p>페이지에 접속하는 순간 <code class="language-plaintext highlighter-rouge">listItems()</code>가 실행된다. <br />
그래서 반환되는 데이터를 <code class="language-plaintext highlighter-rouge">items</code>에 넘겨 <code class="language-plaintext highlighter-rouge">ItemListViewer</code>에 전달한다.</p>

<ul>
  <li>components/viewer/ItemListViewer.js</li>
</ul>

<p>```react
…</p>

<p>const ListItem = ({ item }) =&gt; {
  const { thumbnail, name, price, id, tags } = item;
  return (
    &lt;Item to={<code class="language-plaintext highlighter-rouge">/item/${id}</code>}&gt;
      &lt;ItemImage src={thumbnail} /&gt;
      <ItemInfo>
        &lt;h1&gt;{name}&lt;/h1&gt;
        &lt;p&gt;{price}&lt;/p&gt;
        {tags.map((tag) =&gt; (
          &lt;h2&gt;#{tag}&lt;/h2&gt;
        ))}
      </ItemInfo>
    &lt;/Item&gt;
  );
};</p>

<p>const ItemListViewer = ({ loading, error, items }) =&gt; {
  if (error) {
    return <ItemListViewBlock>에러가 발생했습니다.</ItemListViewBlock>;
  }</p>

<p>return (
    &lt;&gt;
      <ItemListViewBlock>
        <ItemListViewWrapper>
          &lt;ItemListView className={'container'}&gt;
            {!loading &amp;&amp; items &amp;&amp; (
              &lt;&gt;
                {items.map((item) =&gt; (
                  &lt;ListItem item={item} key={item.id} /&gt;
                ))}
              &lt;/&gt;
            )}
          &lt;/ItemListView&gt;
        </ItemListViewWrapper>
      </ItemListViewBlock>
    &lt;/&gt;
  );
};</p>

<p>…</p>
:ET